{
  "name": "connect-compiler",
  "version": "0.1.2",
  "description": "Dynamically recompile stale assets",
  "homepage": "http://dsc.github.com/connect-compiler",
  "keywords": [
    "connect",
    "middleware",
    "compiler",
    "development",
    "coffee-script",
    "coco",
    "jade",
    "stylus",
    "less",
    "css",
    "minify"
  ],
  "author": {
    "name": "David Schoonover",
    "email": "http://less.ly",
    "url": "dsc@less.ly"
  },
  "main": "./compiler",
  "dependencies": {
    "seq": "https://github.com/dsc/node-seq/tarball/master"
  },
  "devDependencies": {
    "expresso": ">= 0.9.2",
    "express": ">= 2.5.8",
    "coco": ">= 0.7.0",
    "coffee-script": ">= 1.2.0",
    "jade": ">= 0.20.3",
    "stylus": ">= 0.24.0",
    "nib": ">= 0.3.2",
    "less": ">= 1.2.2",
    "jison": ">= 0.3.2"
  },
  "scripts": {
    "test": "expresso"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dsc/connect-compiler.git"
  },
  "bugs": {
    "url": "http://github.com/dsc/connect-compiler/issues"
  },
  "engine": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "readme": "# connect-compiler\n\n[`connect`](http://senchalabs.github.com/connect/) middleware for dynamically recompiling derived files at serve-time. This module is designed for speeding up development; best-practices would have you compile all necessary files as part of your production deploy process. But you knew that, of course.\n\nUsage is the same as all other `connect` middleware:\n\n````js\n    var connect  = require('connect')\n    ,   compiler = require('connect-compiler')\n    \n    ,   server = connect.createServer(\n            connect.logger(),\n            compiler({\n                src     : 'src'\n                dest    : 'var'\n                enabled : [ 'coffee', 'uglify' ]\n            }),\n            connect.static(__dirname + '/public'),\n            connect.static(__dirname + '/var')\n        )\n    ;\n    \n    server.listen(6969);\n````\n\nOf note, earlier versions of `connect` actually came with a module like this, but they do not any longer.\n\n## Installation\n\nVia [npm](http://npmjs.org/):\n\n````sh\nnpm install connect-compiler\n````\n\nOr if you want to hack on the source:\n\n````sh\ngit clone https://github.com/dsc/connect-compiler.git\ncd connect-compiler\nnpm link\n````\n\n\n## Settings\n\nThe compiler middleware takes a settings object, minimally containing a list of compilers to \nenable (`enabled`). Most uses will also specify a source directory (`src`).\n\n<table>\n    <thead>\n        <tr>\n            <th>\n                name\n            </th>\n            <th>\n                type\n            </th>\n            <th>\n                default\n            </th>\n            <th>\n                description\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <strong>enabled</strong>\n            </td>\n            <td>\n                <code>String</code>, <code>String[]</code>\n            </td>\n            <td></td>\n            <td>\n                <strong>Required</strong> Enabled compiler id(s). See below for included compilers.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>src</strong>\n            </td>\n            <td>\n                <code>String</code>, <code>String[]</code>\n            </td>\n            <td>\n                cwd\n            </td>\n            <td>\n                Directories to search for source files to compile.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>dest</strong>\n            </td>\n            <td>\n                <code>String</code>\n            </td>\n            <td>\n                <code>src</code> or<br>\n                <code>src[0]</code> if Array\n            </td>\n            <td>\n                Directory to write compiled result.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>roots</strong>\n            </td>\n            <td>\n                <code>{src:dest, ...}</code>,<br>\n                <code>[[src, dest], ...]</code>\n            </td>\n            <td></td>\n            <td>\n                Allows you to specify multiple, ordered <code>src</code>-<code>dest</code> pairs. One of <code>roots</code> or <code>src</code> is required; <code>roots</code> takes precedence over <code>src</code> if present.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>log_level</strong>\n            </td>\n            <td>\n                <code>String</code> , <code>Number</code>\n            </td>\n            <td>\n                <code>WARN</code>\n            </td>\n            <td>\n                Logging verbosity. Valid values (case-insensitive): <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>silent</code>, or a numeric constant (as found in <code>LOG</code>).\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>create_dirs</strong>\n            </td>\n            <td>\n                <code>Boolean</code>\n            </td>\n            <td>\n                <code>true</code>\n            </td>\n            <td>\n                Creates intermediate directories for destination files.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>mount</strong>\n            </td>\n            <td>\n                <code>String</code>\n            </td>\n            <td></td>\n            <td>\n                Prefix trimmed off request path before matching/processing.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>delta</strong>\n            </td>\n            <td>\n                <code>Number</code>\n            </td>\n            <td>\n                <code>0</code>\n            </td>\n            <td>\n                Delta <code>mtime</code> (in seconds) required for a derived file to be considered stale, and therefore recompiled. By default, any change will cause a file to be recompiled on next request.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>expires</strong>\n            </td>\n            <td>\n                <code>Boolean</code>\n            </td>\n            <td>\n                <code>false</code>\n            </td>\n            <td>\n                Automatically treat files as stale if this old in secs.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>external_timeout</strong>\n            </td>\n            <td>\n                <code>Number</code>\n            </td>\n            <td>\n                <code>3000</code>\n            </td>\n            <td>\n                Milliseconds after which to kill subprocess commands.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>cascade</strong>\n            </td>\n            <td>\n                <code>Boolean</code>\n            </td>\n            <td>\n                <code>false</code>\n            </td>\n            <td>\n                Invoke all compilers that match? otherwise, only first.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>resolve_index</strong>\n            </td>\n            <td>\n                <code>Boolean</code> , <code>String</code>\n            </td>\n            <td>\n                <code>false</code>\n            </td>\n            <td>\n                If <code>true</code>-y, directories are resolved with the supplied filename, where <code>true</code> maps to <code>'index.html'</code>.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>ignore</strong>\n            </td>\n            <td>\n                <code>RegExp</code>\n            </td>\n            <td>\n                <code>/\\.(jpe?g|gif|png)$/i</code>\n            </td>\n            <td>\n                Requests matching this pattern are short-circuit ignored, and no compiler matching occurs.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>allowed_methods</strong>\n            </td>\n            <td>\n                <code>String[]</code>\n            </td>\n            <td>\n                <code>['GET']</code>\n            </td>\n            <td>\n                HTTP methods compiler should process. This setting is global-only -- per-compiler overrides specified via <code>options</code> will have no effect.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <strong>options</strong>\n            </td>\n            <td>\n                <code>{compilerId:settings, ...}</code>\n            </td>\n            <td></td>\n            <td>\n                Hash of additional per-compiler options, mapped by compiler id. Each compiler is supplied a copy of the <code>settings</code> object; if additional options are supplied in this way for a given compiler, they will be merged into the settings (and override any colliding top-level keys).\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n\n\n## Compilers\n\nTo enable a compiler, you specify its `id`, which you can get from the handy list that follows. Some\ncompilers take options, which you pass using the `options` setting using the compiler `id` as the\nkey.\n\nFor example, to disable the `bare` option for the CoffeeScript compiler, you'd do something like:\n\n````js\nserver = connect.createServer(\n    compiler({\n        src     : 'src'\n        dest    : 'var'\n        enabled : [ 'coffee' ],\n        options : {\n            'coffee' : {\n                'bare' : false\n            }\n        }\n    }),\n    connect.static(__dirname + '/public'),\n    connect.static(__dirname + '/var')\n)\n````\n\n### Compiler IDs\n\n-   [CoffeeScript](http://coffeescript.org/) Compiler: `coffee`\n-   [Coco](http://satyr.github.com/coco/) Compiler: `coco`\n-   [Uglify](https://github.com/mishoo/UglifyJS) Compiler: `uglify`\n-   [Jade](http://jade-lang.com/) Compiler: `jade`\n-   [Stylus](http://learnboost.github.com/stylus/) Compiler: `stylus`\n-   [Less](http://lesscss.org/) Compiler: `less`\n-   [Sass](http://sass-lang.com/) Compiler: `sass` -- Using [sass.js](https://github.com/visionmedia/sass.js).\n-   [SassRuby](http://sass-lang.com/) Compiler: `sass_ruby` -- External compiler using a shell command to \n    the [Ruby version of Sass](http://sass-lang.com/download.html) (which you must install that part yourself).\n-   [Jison](http://zaach.github.com/jison/) Compiler: `jison`\n\n\n## Feedback\n\nFind a bug or want to contribute? Open a ticket on [github](http://github.com/dsc/connect-compiler). \nYou're also welcome to send me email at [dsc@less.ly](mailto:dsc@less.ly?subject=connect-compiler).\n\nIf you're interested in contributing, note that at the moment, a version of `node-seq` is checked in under \n`node_modules` while we wait for a pull request to be pulled into `master`.\n\n",
  "_id": "connect-compiler@0.1.2",
  "dist": {
    "shasum": "691f511bdc0c0a34a68a87c3ac09b9731759186b"
  },
  "_from": "connect-compiler@*"
}
